{"ast":null,"code":"import axios from 'axios';\n\n// Create an axios instance with default config\nconst API = axios.create({\n  baseURL: process.env.REACT_APP_API_URL || 'http://localhost:5000/api',\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Mock KYC data including Kenyan ID details\nconst mockKYCData = [{\n  id: \"123e4567-e89b-12d3-a456-426614174000\",\n  status: \"pending\",\n  userName: \"John Kimani\",\n  userEmail: \"john@example.com\",\n  userPhone: \"+254722123456\",\n  verificationType: \"idCard\",\n  remarks: \"\",\n  createdAt: \"2023-10-01T12:00:00Z\",\n  updatedAt: \"2023-10-01T12:00:00Z\",\n  nationalId: {\n    idNumber: \"12345678\",\n    serialNumber: \"A123456\",\n    fullName: \"JOHN KIMANI NDEGWA\",\n    dateOfBirth: \"1990-01-01\",\n    gender: \"MALE\",\n    districtOfBirth: \"NAIROBI\",\n    placeOfIssue: \"NAIROBI\",\n    dateOfIssue: \"2015-01-01\",\n    extractedText: \"REPUBLIC OF KENYA\\nNATIONAL IDENTITY CARD\\nSerial No: A123456\\nID No: 12345678\\nFull Names: JOHN KIMANI NDEGWA\\nSex: MALE\\nDate of Birth: 01.01.1990\\nDistrict of Birth: NAIROBI\\nPlace of Issue: NAIROBI\\nDate of Issue: 01.01.2015\\nSignature: [Signature]\"\n  },\n  documents: [{\n    documentType: \"ID Front\",\n    imageUrl: \"https://via.placeholder.com/400x250?text=Kenya+ID+Front\"\n  }, {\n    documentType: \"ID Back\",\n    imageUrl: \"https://via.placeholder.com/400x250?text=Kenya+ID+Back\"\n  }],\n  livenessCheck: {\n    status: \"passed\",\n    confidence: 0.95,\n    frames: [{\n      imageUrl: \"https://via.placeholder.com/300x300?text=Liveness+Frame+1\",\n      timestamp: \"2023-10-01T12:00:10Z\"\n    }, {\n      imageUrl: \"https://via.placeholder.com/300x300?text=Liveness+Frame+2\",\n      timestamp: \"2023-10-01T12:00:15Z\"\n    }]\n  }\n}, {\n  id: \"223e4567-e89b-12d3-a456-426614174001\",\n  status: \"approved\",\n  userName: \"Mary Wanjiru\",\n  userEmail: \"mary@example.com\",\n  userPhone: \"+254733987654\",\n  verificationType: \"idCard\",\n  remarks: \"All documents verified successfully\",\n  createdAt: \"2023-09-28T10:30:00Z\",\n  updatedAt: \"2023-09-29T14:15:00Z\",\n  nationalId: {\n    idNumber: \"87654321\",\n    serialNumber: \"B654321\",\n    fullName: \"MARY WANJIRU KAMAU\",\n    dateOfBirth: \"1985-05-15\",\n    gender: \"FEMALE\",\n    districtOfBirth: \"KIAMBU\",\n    placeOfIssue: \"NAIROBI\",\n    dateOfIssue: \"2012-06-20\",\n    extractedText: \"REPUBLIC OF KENYA\\nNATIONAL IDENTITY CARD\\nSerial No: B654321\\nID No: 87654321\\nFull Names: MARY WANJIRU KAMAU\\nSex: FEMALE\\nDate of Birth: 15.05.1985\\nDistrict of Birth: KIAMBU\\nPlace of Issue: NAIROBI\\nDate of Issue: 20.06.2012\\nSignature: [Signature]\"\n  },\n  documents: [{\n    documentType: \"ID Front\",\n    imageUrl: \"https://via.placeholder.com/400x250?text=Kenya+ID+Front+Mary\"\n  }, {\n    documentType: \"ID Back\",\n    imageUrl: \"https://via.placeholder.com/400x250?text=Kenya+ID+Back+Mary\"\n  }],\n  livenessCheck: {\n    status: \"passed\",\n    confidence: 0.98,\n    frames: [{\n      imageUrl: \"https://via.placeholder.com/300x300?text=Liveness+Frame+1+Mary\",\n      timestamp: \"2023-09-28T10:31:00Z\"\n    }, {\n      imageUrl: \"https://via.placeholder.com/300x300?text=Liveness+Frame+2+Mary\",\n      timestamp: \"2023-09-28T10:31:05Z\"\n    }, {\n      imageUrl: \"https://via.placeholder.com/300x300?text=Liveness+Frame+3+Mary\",\n      timestamp: \"2023-09-28T10:31:10Z\"\n    }]\n  }\n}, {\n  id: \"323e4567-e89b-12d3-a456-426614174002\",\n  status: \"rejected\",\n  userName: \"Peter Ochieng\",\n  userEmail: \"peter@example.com\",\n  userPhone: \"+254711456789\",\n  verificationType: \"idCard\",\n  remarks: \"ID appears to be tampered with. Liveness check failed.\",\n  createdAt: \"2023-09-25T09:15:00Z\",\n  updatedAt: \"2023-09-26T11:20:00Z\",\n  nationalId: {\n    idNumber: \"23456789\",\n    serialNumber: \"C789012\",\n    fullName: \"PETER OCHIENG OMONDI\",\n    dateOfBirth: \"1992-11-30\",\n    gender: \"MALE\",\n    districtOfBirth: \"KISUMU\",\n    placeOfIssue: \"KISUMU\",\n    dateOfIssue: \"2017-03-15\",\n    extractedText: \"REPUBLIC OF KENYA\\nNATIONAL IDENTITY CARD\\nSerial No: C789012\\nID No: 23456789\\nFull Names: PETER OCHIENG OMONDI\\nSex: MALE\\nDate of Birth: 30.11.1992\\nDistrict of Birth: KISUMU\\nPlace of Issue: KISUMU\\nDate of Issue: 15.03.2017\\nSignature: [Signature]\"\n  },\n  documents: [{\n    documentType: \"ID Front\",\n    imageUrl: \"https://via.placeholder.com/400x250?text=Kenya+ID+Front+Peter\"\n  }, {\n    documentType: \"ID Back\",\n    imageUrl: \"https://via.placeholder.com/400x250?text=Kenya+ID+Back+Peter\"\n  }],\n  livenessCheck: {\n    status: \"failed\",\n    confidence: 0.45,\n    frames: [{\n      imageUrl: \"https://via.placeholder.com/300x300?text=Liveness+Frame+1+Peter\",\n      timestamp: \"2023-09-25T09:16:00Z\"\n    }, {\n      imageUrl: \"https://via.placeholder.com/300x300?text=Liveness+Frame+2+Peter\",\n      timestamp: \"2023-09-25T09:16:05Z\"\n    }]\n  }\n}, {\n  id: \"423e4567-e89b-12d3-a456-426614174003\",\n  status: \"pending\",\n  userName: \"Sarah Njeri\",\n  userEmail: \"sarah@example.com\",\n  userPhone: \"+254700123456\",\n  verificationType: \"idCard\",\n  remarks: \"\",\n  createdAt: \"2023-10-02T14:20:00Z\",\n  updatedAt: \"2023-10-02T14:20:00Z\",\n  nationalId: {\n    idNumber: \"34567890\",\n    serialNumber: \"D890123\",\n    fullName: \"SARAH NJERI MWANGI\",\n    dateOfBirth: \"1988-07-22\",\n    gender: \"FEMALE\",\n    districtOfBirth: \"NYERI\",\n    placeOfIssue: \"NYERI\",\n    dateOfIssue: \"2014-09-10\",\n    extractedText: \"REPUBLIC OF KENYA\\nNATIONAL IDENTITY CARD\\nSerial No: D890123\\nID No: 34567890\\nFull Names: SARAH NJERI MWANGI\\nSex: FEMALE\\nDate of Birth: 22.07.1988\\nDistrict of Birth: NYERI\\nPlace of Issue: NYERI\\nDate of Issue: 10.09.2014\\nSignature: [Signature]\"\n  },\n  documents: [{\n    documentType: \"ID Front\",\n    imageUrl: \"https://via.placeholder.com/400x250?text=Kenya+ID+Front+Sarah\"\n  }, {\n    documentType: \"ID Back\",\n    imageUrl: \"https://via.placeholder.com/400x250?text=Kenya+ID+Back+Sarah\"\n  }],\n  livenessCheck: {\n    status: \"passed\",\n    confidence: 0.92,\n    frames: [{\n      imageUrl: \"https://via.placeholder.com/300x300?text=Liveness+Frame+1+Sarah\",\n      timestamp: \"2023-10-02T14:21:00Z\"\n    }, {\n      imageUrl: \"https://via.placeholder.com/300x300?text=Liveness+Frame+2+Sarah\",\n      timestamp: \"2023-10-02T14:21:05Z\"\n    }]\n  }\n}, {\n  id: \"523e4567-e89b-12d3-a456-426614174004\",\n  status: \"pending\",\n  userName: \"David Mutua\",\n  userEmail: \"david@example.com\",\n  userPhone: \"+254755789012\",\n  verificationType: \"idCard\",\n  remarks: \"\",\n  createdAt: \"2023-10-03T09:45:00Z\",\n  updatedAt: \"2023-10-03T09:45:00Z\",\n  nationalId: {\n    idNumber: \"45678901\",\n    serialNumber: \"E901234\",\n    fullName: \"DAVID MUTUA MUSYOKA\",\n    dateOfBirth: \"1995-03-18\",\n    gender: \"MALE\",\n    districtOfBirth: \"MACHAKOS\",\n    placeOfIssue: \"MACHAKOS\",\n    dateOfIssue: \"2019-02-05\",\n    extractedText: \"REPUBLIC OF KENYA\\nNATIONAL IDENTITY CARD\\nSerial No: E901234\\nID No: 45678901\\nFull Names: DAVID MUTUA MUSYOKA\\nSex: MALE\\nDate of Birth: 18.03.1995\\nDistrict of Birth: MACHAKOS\\nPlace of Issue: MACHAKOS\\nDate of Issue: 05.02.2019\\nSignature: [Signature]\"\n  },\n  documents: [{\n    documentType: \"ID Front\",\n    imageUrl: \"https://via.placeholder.com/400x250?text=Kenya+ID+Front+David\"\n  }, {\n    documentType: \"ID Back\",\n    imageUrl: \"https://via.placeholder.com/400x250?text=Kenya+ID+Back+David\"\n  }],\n  livenessCheck: {\n    status: \"passed\",\n    confidence: 0.96,\n    frames: [{\n      imageUrl: \"https://via.placeholder.com/300x300?text=Liveness+Frame+1+David\",\n      timestamp: \"2023-10-03T09:46:00Z\"\n    }, {\n      imageUrl: \"https://via.placeholder.com/300x300?text=Liveness+Frame+2+David\",\n      timestamp: \"2023-10-03T09:46:05Z\"\n    }]\n  }\n}];\n\n// Add a request interceptor to add the auth token to requests\nAPI.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers['Authorization'] = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Add a response interceptor to handle token expiration\nAPI.interceptors.response.use(response => {\n  return response;\n}, error => {\n  if (error.response && error.response.status === 401) {\n    // Token expired or invalid\n    localStorage.removeItem('token');\n    window.location.href = '/login';\n  }\n  return Promise.reject(error);\n});\n\n// Auth services\nexport const authService = {\n  login: async (email, password) => {\n    try {\n      // Mock login for development without backend\n      if (email === 'user' && password === 'password') {\n        const mockResponse = {\n          token: 'mock-jwt-token',\n          user: {\n            id: '1',\n            name: 'Test User',\n            email: 'user',\n            role: 'admin'\n          }\n        };\n        localStorage.setItem('token', mockResponse.token);\n        localStorage.setItem('user', JSON.stringify(mockResponse.user));\n        return mockResponse;\n      }\n\n      // If credentials don't match the hardcoded ones, throw an error\n      throw {\n        response: {\n          data: {\n            message: 'Invalid credentials. Use username \"user\" and password \"password\".'\n          }\n        }\n      };\n\n      // This code will run when you have a backend\n      // const response = await API.post('/auth/login', { email, password });\n      // if (response.data.token) {\n      //   localStorage.setItem('token', response.data.token);\n      // }\n      // return response.data;\n    } catch (error) {\n      throw error;\n    }\n  },\n  logout: () => {\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n  },\n  getCurrentUser: async () => {\n    try {\n      // Mock user data for development without backend\n      const user = localStorage.getItem('user');\n      if (user) {\n        return JSON.parse(user);\n      }\n\n      // This code will run when you have a backend\n      // const response = await API.get('/auth/me');\n      // return response.data;\n\n      throw new Error('Not authenticated');\n    } catch (error) {\n      throw error;\n    }\n  }\n};\n\n// KYC services\nexport const kycService = {\n  getAll: async (params = {}) => {\n    try {\n      // For mock implementation\n      // Process filters from params if provided\n      let filteredData = [...mockKYCData];\n      if (params.status) {\n        filteredData = filteredData.filter(item => item.status === params.status);\n      }\n      if (params.verificationType) {\n        filteredData = filteredData.filter(item => item.verificationType === params.verificationType);\n      }\n      if (params.searchTerm) {\n        const term = params.searchTerm.toLowerCase();\n        filteredData = filteredData.filter(item => {\n          var _item$nationalId;\n          return item.id.toLowerCase().includes(term) || item.userName.toLowerCase().includes(term) || item.userEmail.toLowerCase().includes(term) || (((_item$nationalId = item.nationalId) === null || _item$nationalId === void 0 ? void 0 : _item$nationalId.idNumber) || '').toLowerCase().includes(term);\n        });\n      }\n      if (params.dateFrom) {\n        const fromDate = new Date(params.dateFrom);\n        filteredData = filteredData.filter(item => new Date(item.createdAt) >= fromDate);\n      }\n      if (params.dateTo) {\n        const toDate = new Date(params.dateTo);\n        toDate.setHours(23, 59, 59, 999); // Set to end of day\n        filteredData = filteredData.filter(item => new Date(item.createdAt) <= toDate);\n      }\n\n      // Sort data\n      if (params.sort) {\n        const [field, direction] = params.sort.split(':');\n        filteredData.sort((a, b) => {\n          if (direction === 'desc') {\n            return new Date(b[field]) - new Date(a[field]);\n          }\n          return new Date(a[field]) - new Date(b[field]);\n        });\n      }\n\n      // Paginate data\n      const page = parseInt(params.page) || 1;\n      const limit = parseInt(params.limit) || 10;\n      const startIndex = (page - 1) * limit;\n      const endIndex = startIndex + limit;\n      const paginatedData = filteredData.slice(startIndex, endIndex);\n\n      // Return mock response structure\n      return {\n        results: paginatedData,\n        totalPages: Math.ceil(filteredData.length / limit),\n        totalResults: filteredData.length,\n        page: page,\n        limit: limit\n      };\n\n      // For actual implementation\n      // const response = await API.get('/kyc', { params });\n      // return response.data;\n    } catch (error) {\n      throw error;\n    }\n  },\n  getById: async id => {\n    try {\n      // For mock implementation\n      const result = mockKYCData.find(item => item.id === id);\n      if (!result) throw new Error('KYC record not found');\n      return result;\n\n      // For actual implementation\n      // const response = await API.get(`/kyc/${id}`);\n      // return response.data;\n    } catch (error) {\n      throw error;\n    }\n  },\n  updateStatus: async (id, status, remarks) => {\n    try {\n      // For mock implementation\n      const itemIndex = mockKYCData.findIndex(item => item.id === id);\n      if (itemIndex === -1) throw new Error('KYC record not found');\n      mockKYCData[itemIndex] = {\n        ...mockKYCData[itemIndex],\n        status,\n        remarks,\n        updatedAt: new Date().toISOString()\n      };\n      return mockKYCData[itemIndex];\n\n      // For actual implementation\n      // const response = await API.patch(`/kyc/${id}/status`, { status, remarks });\n      // return response.data;\n    } catch (error) {\n      throw error;\n    }\n  }\n};\n\n// Analytics services\nexport const analyticsService = {\n  getDashboardStats: async () => {\n    try {\n      // For mock implementation\n      // Calculate stats based on mockKYCData\n      const pendingRequests = mockKYCData.filter(item => item.status === 'pending').length;\n      const approvedRequests = mockKYCData.filter(item => item.status === 'approved').length;\n      const rejectedRequests = mockKYCData.filter(item => item.status === 'rejected').length;\n\n      // Count verification types\n      const verificationTypes = {\n        idCard: mockKYCData.filter(item => item.verificationType === 'idCard').length,\n        passport: 0,\n        drivingLicense: 0,\n        other: 0\n      };\n\n      // Generate mock trends data for the last 7 days\n      const verificationTrends = [];\n      const dailyTrends = []; // Add this for the Analytics component\n      const today = new Date();\n      for (let i = 6; i >= 0; i--) {\n        const date = new Date(today);\n        date.setDate(date.getDate() - i);\n        const formattedDate = date.toISOString().split('T')[0];\n\n        // Generate random count between 1-10 for each day\n        const count = Math.floor(Math.random() * 10) + 1;\n        verificationTrends.push({\n          date: formattedDate,\n          count\n        });\n\n        // For dailyTrends\n        const total = Math.floor(Math.random() * 30) + 10;\n        const approved = Math.floor(Math.random() * total * 0.7);\n        const rejected = Math.floor(Math.random() * (total - approved) * 0.5);\n        const pending = total - approved - rejected;\n        dailyTrends.push({\n          date: formattedDate,\n          total,\n          approved,\n          rejected,\n          pending\n        });\n      }\n\n      // Calculate age distribution from mockKYCData\n      const ageDistribution = {\n        \"18-25\": 0,\n        \"26-35\": 0,\n        \"36-45\": 0,\n        \"46+\": 0\n      };\n      mockKYCData.forEach(item => {\n        if (item.nationalId && item.nationalId.dateOfBirth) {\n          const birthDate = new Date(item.nationalId.dateOfBirth);\n          const age = today.getFullYear() - birthDate.getFullYear();\n          if (age >= 18 && age <= 25) ageDistribution[\"18-25\"]++;else if (age >= 26 && age <= 35) ageDistribution[\"26-35\"]++;else if (age >= 36 && age <= 45) ageDistribution[\"36-45\"]++;else if (age >= 46) ageDistribution[\"46+\"]++;\n        }\n      });\n\n      // Calculate gender distribution\n      const genderDistribution = {\n        male: mockKYCData.filter(item => {\n          var _item$nationalId2;\n          return ((_item$nationalId2 = item.nationalId) === null || _item$nationalId2 === void 0 ? void 0 : _item$nationalId2.gender) === 'MALE';\n        }).length,\n        female: mockKYCData.filter(item => {\n          var _item$nationalId3;\n          return ((_item$nationalId3 = item.nationalId) === null || _item$nationalId3 === void 0 ? void 0 : _item$nationalId3.gender) === 'FEMALE';\n        }).length,\n        other: 0\n      };\n\n      // Calculate district distribution\n      const districtData = {};\n      mockKYCData.forEach(item => {\n        var _item$nationalId4;\n        const district = (_item$nationalId4 = item.nationalId) === null || _item$nationalId4 === void 0 ? void 0 : _item$nationalId4.districtOfBirth;\n        if (district) {\n          if (districtData[district]) {\n            districtData[district]++;\n          } else {\n            districtData[district] = 1;\n          }\n        }\n      });\n\n      // Calculate average verification time (mocked)\n      const avgVerificationTime = \"2.5\"; // in minutes\n\n      // Calculate failure reasons (mocked)\n      const failureReasons = {\n        \"ID mismatch\": 30,\n        \"Poor image quality\": 25,\n        \"Fake ID detected\": 15,\n        \"Liveness check failed\": 20,\n        \"Other\": 10\n      };\n\n      // Generate monthly conversion rate for Analytics component\n      const monthlyConversionRate = Array.from(Array(6).keys()).map(i => {\n        const date = new Date();\n        date.setMonth(date.getMonth() - i);\n        return {\n          month: date.toLocaleDateString('en-US', {\n            month: 'short',\n            year: 'numeric'\n          }),\n          rate: Math.floor(Math.random() * 30) + 40 // 40-70% conversion rate\n        };\n      }).reverse();\n\n      // Add insights for Analytics component\n      const insights = ['Verification success rate has increased by 12% in the last 30 days', 'Mobile devices account for 65% of all verification attempts', 'Peak verification times are between 11:00 AM and 1:00 PM', 'Average time to complete verification has decreased from 4.2 to 3.1 minutes'];\n      return {\n        totalRequests: mockKYCData.length,\n        pendingRequests,\n        approvedRequests,\n        rejectedRequests,\n        verificationTypes,\n        verificationTrends,\n        dailyTrends,\n        // Add this for the Analytics component\n        monthlyConversionRate,\n        // Add this for the Analytics component\n        ageDistribution,\n        genderDistribution,\n        districtData,\n        avgVerificationTime,\n        failureReasons,\n        insights // Add this for the Analytics component\n      };\n\n      // For actual implementation\n      // const response = await API.get('/analytics/dashboard');\n      // return response.data;\n    } catch (error) {\n      throw error;\n    }\n  },\n  getVerificationStats: async (params = {}) => {\n    try {\n      // For mock implementation - adding more comprehensive analytics data\n      const dashboardStats = await analyticsService.getDashboardStats();\n\n      // Generate funnel data\n      const funnelStepCounts = [250, 200, 180, 150, 120]; // Started, ID Uploaded, ID Verified, Liveness Check, Completed\n      const verificationFunnel = [{\n        step: 'Started',\n        count: funnelStepCounts[0]\n      }, {\n        step: 'ID Uploaded',\n        count: funnelStepCounts[1]\n      }, {\n        step: 'ID Verified',\n        count: funnelStepCounts[2]\n      }, {\n        step: 'Liveness Check',\n        count: funnelStepCounts[3]\n      }, {\n        step: 'Completed',\n        count: funnelStepCounts[4]\n      }];\n\n      // Time per step\n      const stepTimes = [{\n        step: 'ID Upload',\n        avgTimeSeconds: 45\n      }, {\n        step: 'ID Verification',\n        avgTimeSeconds: 120\n      }, {\n        step: 'Liveness Check',\n        avgTimeSeconds: 60\n      }, {\n        step: 'Final Verification',\n        avgTimeSeconds: 90\n      }];\n\n      // Generate hourly distribution data\n      const hourlyDistribution = Array.from(Array(24).keys()).map(hour => ({\n        hour: `${hour}:00`,\n        count: Math.floor(Math.random() * 50) + (hour >= 8 && hour <= 17 ? 50 : 10) // Higher during business hours\n      }));\n\n      // Abandonment info\n      const abandonmentReasons = [{\n        reason: 'Session timeout',\n        percentage: 35\n      }, {\n        reason: 'ID scan failed',\n        percentage: 25\n      }, {\n        reason: 'Liveness check issues',\n        percentage: 20\n      }, {\n        reason: 'User canceled',\n        percentage: 15\n      }, {\n        reason: 'Other',\n        percentage: 5\n      }];\n\n      // Rural vs urban count\n      const urbanCount = 180;\n      const ruralCount = 120;\n\n      // Geographic insights\n      const geographicInsights = ['Highest verification rates come from Nairobi County with 45% of all verifications', 'Rural areas show 25% lower completion rates compared to urban centers', 'Verification attempts in Mombasa peak during evening hours, unlike other regions'];\n\n      // ID document age\n      const idDocumentAge = [45, 120, 80, 55]; // 0-1, 1-3, 3-5, 5+ years\n\n      // Processing time trend\n      const processingTimeTrend = Array.from(Array(10).keys()).map(i => {\n        const date = new Date();\n        date.setDate(date.getDate() - i);\n        return {\n          date: date.toISOString().split('T')[0],\n          avgMinutes: Math.random() * 2 + 1 // Random between 1-3 minutes\n        };\n      }).reverse();\n\n      // Agent performance data\n      const agentPerformance = [{\n        name: 'Agent 1',\n        avgTime: 1.8,\n        accuracy: 95\n      }, {\n        name: 'Agent 2',\n        avgTime: 2.5,\n        accuracy: 92\n      }, {\n        name: 'Agent 3',\n        avgTime: 1.5,\n        accuracy: 88\n      }, {\n        name: 'Agent 4',\n        avgTime: 2.1,\n        accuracy: 97\n      }];\n\n      // System performance data\n      const systemPerformance = Array.from(Array(24).keys()).map(hour => ({\n        hour: `${hour}:00`,\n        responseTime: Math.floor(Math.random() * 100) + 200,\n        // 200-300ms\n        requestsPerMinute: Math.floor(Math.random() * 20) + (hour >= 8 && hour <= 17 ? 20 : 5) // Higher during business hours\n      }));\n\n      // Operational recommendations\n      const operationalRecommendations = ['Increase server capacity during peak hours (10AM-2PM) to reduce response times', 'Optimize the ID verification step which is currently the longest part of the process', 'Consider implementing a queue system during high traffic periods to maintain performance'];\n\n      // Fraud detection data\n      const fraudDetectionData = {\n        potentialFraudCount: 35,\n        falsePositiveRate: '18%',\n        livenessCheckFailures: 28,\n        documentTamperingCount: 15,\n        multipleAttemptCount: 22,\n        suspiciousPatterns: [{\n          type: 'Multiple attempts with different IDs',\n          count: 12\n        }, {\n          type: 'Document tampering detected',\n          count: 15\n        }, {\n          type: 'Liveness check spoofing',\n          count: 8\n        }, {\n          type: 'Suspicious IP patterns',\n          count: 6\n        }],\n        geographicRisk: [{\n          location: 'Region A',\n          riskScore: 72\n        }, {\n          location: 'Region B',\n          riskScore: 45\n        }, {\n          location: 'Region C',\n          riskScore: 63\n        }, {\n          location: 'Region D',\n          riskScore: 28\n        }],\n        fraudAlerts: [{\n          title: 'Multiple verification attempts detected',\n          severity: 'High',\n          description: 'Same device used for 5 different verification attempts with different IDs in the last 24 hours',\n          timestamp: '2023-10-03 14:25:12'\n        }, {\n          title: 'Potential document tampering',\n          severity: 'Medium',\n          description: 'Image analysis detected potential modifications to ID number field',\n          timestamp: '2023-10-03 11:18:45'\n        }, {\n          title: 'Unusual geographic pattern',\n          severity: 'Low',\n          description: 'User location changed significantly during verification process',\n          timestamp: '2023-10-02 19:36:22'\n        }]\n      };\n\n      // Return comprehensive analytics data\n      return {\n        totalRequests: dashboardStats.totalRequests,\n        approvedRequests: dashboardStats.approvedRequests,\n        rejectedRequests: dashboardStats.rejectedRequests,\n        pendingRequests: dashboardStats.pendingRequests,\n        avgVerificationTime: dashboardStats.avgVerificationTime,\n        avgProcessingTime: '2.3',\n        // in hours\n\n        // Verification trends\n        verificationTrends: dashboardStats.verificationTrends,\n        hourlyDistribution,\n        // Conversion and funnel data\n        verificationFunnel,\n        stepTimes,\n        biggestDropoffStep: 'Liveness Check → Completion',\n        avgCompletionTime: '3m 15s',\n        abandonmentRate: '52%',\n        commonAbandonmentPoint: 'Liveness Check',\n        abandonmentReasons,\n        monthlyConversionRate: Array.from(Array(6).keys()).map(i => {\n          const date = new Date();\n          date.setMonth(date.getMonth() - i);\n          return {\n            month: date.toLocaleDateString('en-US', {\n              month: 'short',\n              year: 'numeric'\n            }),\n            rate: Math.floor(Math.random() * 30) + 40 // 40-70% conversion rate\n          };\n        }).reverse(),\n        // Document data\n        verificationTypes: dashboardStats.verificationTypes,\n        // Demographics\n        ageDistribution: dashboardStats.ageDistribution,\n        genderDistribution: dashboardStats.genderDistribution,\n        deviceDistribution: {\n          mobile: 280,\n          desktop: 120,\n          tablet: 40\n        },\n        mostCommonAgeGroup: '26-35',\n        genderRatio: 'M:F 1.2:1',\n        idDocumentAge,\n        // Geographic data\n        districtData: dashboardStats.districtData,\n        urbanCount,\n        ruralCount,\n        geographicInsights,\n        // Operational data\n        processingTimeTrend,\n        agentPerformance,\n        systemPerformance,\n        systemUptime: '99.8%',\n        peakHour: '11:00 - 13:00',\n        avgQueueTime: '48s',\n        operationalRecommendations,\n        // Fraud detection\n        failureReasons: dashboardStats.failureReasons,\n        ...fraudDetectionData,\n        // Insights\n        insights: ['Verification success rate has increased by 12% in the last 30 days', 'Mobile devices account for 65% of all verification attempts', 'Peak verification times are between 11:00 AM and 1:00 PM', 'Average time to complete verification has decreased from 4.2 to 3.1 minutes']\n      };\n\n      // For actual implementation\n      // const response = await API.get('/analytics/verifications', { params });\n      // return response.data;\n    } catch (error) {\n      throw error;\n    }\n  }\n};\nexport default {\n  authService,\n  kycService,\n  analyticsService\n};","map":{"version":3,"names":["axios","API","create","baseURL","process","env","REACT_APP_API_URL","headers","mockKYCData","id","status","userName","userEmail","userPhone","verificationType","remarks","createdAt","updatedAt","nationalId","idNumber","serialNumber","fullName","dateOfBirth","gender","districtOfBirth","placeOfIssue","dateOfIssue","extractedText","documents","documentType","imageUrl","livenessCheck","confidence","frames","timestamp","interceptors","request","use","config","token","localStorage","getItem","error","Promise","reject","response","removeItem","window","location","href","authService","login","email","password","mockResponse","user","name","role","setItem","JSON","stringify","data","message","logout","getCurrentUser","parse","Error","kycService","getAll","params","filteredData","filter","item","searchTerm","term","toLowerCase","_item$nationalId","includes","dateFrom","fromDate","Date","dateTo","toDate","setHours","sort","field","direction","split","a","b","page","parseInt","limit","startIndex","endIndex","paginatedData","slice","results","totalPages","Math","ceil","length","totalResults","getById","result","find","updateStatus","itemIndex","findIndex","toISOString","analyticsService","getDashboardStats","pendingRequests","approvedRequests","rejectedRequests","verificationTypes","idCard","passport","drivingLicense","other","verificationTrends","dailyTrends","today","i","date","setDate","getDate","formattedDate","count","floor","random","push","total","approved","rejected","pending","ageDistribution","forEach","birthDate","age","getFullYear","genderDistribution","male","_item$nationalId2","female","_item$nationalId3","districtData","_item$nationalId4","district","avgVerificationTime","failureReasons","monthlyConversionRate","Array","from","keys","map","setMonth","getMonth","month","toLocaleDateString","year","rate","reverse","insights","totalRequests","getVerificationStats","dashboardStats","funnelStepCounts","verificationFunnel","step","stepTimes","avgTimeSeconds","hourlyDistribution","hour","abandonmentReasons","reason","percentage","urbanCount","ruralCount","geographicInsights","idDocumentAge","processingTimeTrend","avgMinutes","agentPerformance","avgTime","accuracy","systemPerformance","responseTime","requestsPerMinute","operationalRecommendations","fraudDetectionData","potentialFraudCount","falsePositiveRate","livenessCheckFailures","documentTamperingCount","multipleAttemptCount","suspiciousPatterns","type","geographicRisk","riskScore","fraudAlerts","title","severity","description","avgProcessingTime","biggestDropoffStep","avgCompletionTime","abandonmentRate","commonAbandonmentPoint","deviceDistribution","mobile","desktop","tablet","mostCommonAgeGroup","genderRatio","systemUptime","peakHour","avgQueueTime"],"sources":["/Users/akasozi/Documents/web-apps/ekyc-dashboard/ekyc-dashboard/src/services/api.js"],"sourcesContent":["import axios from 'axios';\n\n// Create an axios instance with default config\nconst API = axios.create({\n  baseURL: process.env.REACT_APP_API_URL || 'http://localhost:5000/api',\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Mock KYC data including Kenyan ID details\nconst mockKYCData = [\n  {\n    id: \"123e4567-e89b-12d3-a456-426614174000\",\n    status: \"pending\",\n    userName: \"John Kimani\",\n    userEmail: \"john@example.com\",\n    userPhone: \"+254722123456\",\n    verificationType: \"idCard\",\n    remarks: \"\",\n    createdAt: \"2023-10-01T12:00:00Z\",\n    updatedAt: \"2023-10-01T12:00:00Z\",\n    nationalId: {\n      idNumber: \"12345678\",\n      serialNumber: \"A123456\",\n      fullName: \"JOHN KIMANI NDEGWA\",\n      dateOfBirth: \"1990-01-01\",\n      gender: \"MALE\",\n      districtOfBirth: \"NAIROBI\",\n      placeOfIssue: \"NAIROBI\",\n      dateOfIssue: \"2015-01-01\",\n      extractedText: \"REPUBLIC OF KENYA\\nNATIONAL IDENTITY CARD\\nSerial No: A123456\\nID No: 12345678\\nFull Names: JOHN KIMANI NDEGWA\\nSex: MALE\\nDate of Birth: 01.01.1990\\nDistrict of Birth: NAIROBI\\nPlace of Issue: NAIROBI\\nDate of Issue: 01.01.2015\\nSignature: [Signature]\",\n    },\n    documents: [\n      {\n        documentType: \"ID Front\",\n        imageUrl: \"https://via.placeholder.com/400x250?text=Kenya+ID+Front\"\n      },\n      {\n        documentType: \"ID Back\",\n        imageUrl: \"https://via.placeholder.com/400x250?text=Kenya+ID+Back\"\n      }\n    ],\n    livenessCheck: {\n      status: \"passed\",\n      confidence: 0.95,\n      frames: [\n        {\n          imageUrl: \"https://via.placeholder.com/300x300?text=Liveness+Frame+1\",\n          timestamp: \"2023-10-01T12:00:10Z\"\n        },\n        {\n          imageUrl: \"https://via.placeholder.com/300x300?text=Liveness+Frame+2\",\n          timestamp: \"2023-10-01T12:00:15Z\"\n        }\n      ]\n    }\n  },\n  {\n    id: \"223e4567-e89b-12d3-a456-426614174001\",\n    status: \"approved\",\n    userName: \"Mary Wanjiru\",\n    userEmail: \"mary@example.com\",\n    userPhone: \"+254733987654\",\n    verificationType: \"idCard\",\n    remarks: \"All documents verified successfully\",\n    createdAt: \"2023-09-28T10:30:00Z\",\n    updatedAt: \"2023-09-29T14:15:00Z\",\n    nationalId: {\n      idNumber: \"87654321\",\n      serialNumber: \"B654321\",\n      fullName: \"MARY WANJIRU KAMAU\",\n      dateOfBirth: \"1985-05-15\",\n      gender: \"FEMALE\",\n      districtOfBirth: \"KIAMBU\",\n      placeOfIssue: \"NAIROBI\",\n      dateOfIssue: \"2012-06-20\",\n      extractedText: \"REPUBLIC OF KENYA\\nNATIONAL IDENTITY CARD\\nSerial No: B654321\\nID No: 87654321\\nFull Names: MARY WANJIRU KAMAU\\nSex: FEMALE\\nDate of Birth: 15.05.1985\\nDistrict of Birth: KIAMBU\\nPlace of Issue: NAIROBI\\nDate of Issue: 20.06.2012\\nSignature: [Signature]\",\n    },\n    documents: [\n      {\n        documentType: \"ID Front\",\n        imageUrl: \"https://via.placeholder.com/400x250?text=Kenya+ID+Front+Mary\"\n      },\n      {\n        documentType: \"ID Back\",\n        imageUrl: \"https://via.placeholder.com/400x250?text=Kenya+ID+Back+Mary\"\n      }\n    ],\n    livenessCheck: {\n      status: \"passed\",\n      confidence: 0.98,\n      frames: [\n        {\n          imageUrl: \"https://via.placeholder.com/300x300?text=Liveness+Frame+1+Mary\",\n          timestamp: \"2023-09-28T10:31:00Z\"\n        },\n        {\n          imageUrl: \"https://via.placeholder.com/300x300?text=Liveness+Frame+2+Mary\",\n          timestamp: \"2023-09-28T10:31:05Z\"\n        },\n        {\n          imageUrl: \"https://via.placeholder.com/300x300?text=Liveness+Frame+3+Mary\",\n          timestamp: \"2023-09-28T10:31:10Z\"\n        }\n      ]\n    }\n  },\n  {\n    id: \"323e4567-e89b-12d3-a456-426614174002\",\n    status: \"rejected\",\n    userName: \"Peter Ochieng\",\n    userEmail: \"peter@example.com\",\n    userPhone: \"+254711456789\",\n    verificationType: \"idCard\",\n    remarks: \"ID appears to be tampered with. Liveness check failed.\",\n    createdAt: \"2023-09-25T09:15:00Z\",\n    updatedAt: \"2023-09-26T11:20:00Z\",\n    nationalId: {\n      idNumber: \"23456789\",\n      serialNumber: \"C789012\",\n      fullName: \"PETER OCHIENG OMONDI\",\n      dateOfBirth: \"1992-11-30\",\n      gender: \"MALE\",\n      districtOfBirth: \"KISUMU\",\n      placeOfIssue: \"KISUMU\",\n      dateOfIssue: \"2017-03-15\",\n      extractedText: \"REPUBLIC OF KENYA\\nNATIONAL IDENTITY CARD\\nSerial No: C789012\\nID No: 23456789\\nFull Names: PETER OCHIENG OMONDI\\nSex: MALE\\nDate of Birth: 30.11.1992\\nDistrict of Birth: KISUMU\\nPlace of Issue: KISUMU\\nDate of Issue: 15.03.2017\\nSignature: [Signature]\",\n    },\n    documents: [\n      {\n        documentType: \"ID Front\",\n        imageUrl: \"https://via.placeholder.com/400x250?text=Kenya+ID+Front+Peter\"\n      },\n      {\n        documentType: \"ID Back\",\n        imageUrl: \"https://via.placeholder.com/400x250?text=Kenya+ID+Back+Peter\"\n      }\n    ],\n    livenessCheck: {\n      status: \"failed\",\n      confidence: 0.45,\n      frames: [\n        {\n          imageUrl: \"https://via.placeholder.com/300x300?text=Liveness+Frame+1+Peter\",\n          timestamp: \"2023-09-25T09:16:00Z\"\n        },\n        {\n          imageUrl: \"https://via.placeholder.com/300x300?text=Liveness+Frame+2+Peter\",\n          timestamp: \"2023-09-25T09:16:05Z\"\n        }\n      ]\n    }\n  },\n  {\n    id: \"423e4567-e89b-12d3-a456-426614174003\",\n    status: \"pending\",\n    userName: \"Sarah Njeri\",\n    userEmail: \"sarah@example.com\",\n    userPhone: \"+254700123456\",\n    verificationType: \"idCard\",\n    remarks: \"\",\n    createdAt: \"2023-10-02T14:20:00Z\",\n    updatedAt: \"2023-10-02T14:20:00Z\",\n    nationalId: {\n      idNumber: \"34567890\",\n      serialNumber: \"D890123\",\n      fullName: \"SARAH NJERI MWANGI\",\n      dateOfBirth: \"1988-07-22\",\n      gender: \"FEMALE\",\n      districtOfBirth: \"NYERI\",\n      placeOfIssue: \"NYERI\",\n      dateOfIssue: \"2014-09-10\",\n      extractedText: \"REPUBLIC OF KENYA\\nNATIONAL IDENTITY CARD\\nSerial No: D890123\\nID No: 34567890\\nFull Names: SARAH NJERI MWANGI\\nSex: FEMALE\\nDate of Birth: 22.07.1988\\nDistrict of Birth: NYERI\\nPlace of Issue: NYERI\\nDate of Issue: 10.09.2014\\nSignature: [Signature]\",\n    },\n    documents: [\n      {\n        documentType: \"ID Front\",\n        imageUrl: \"https://via.placeholder.com/400x250?text=Kenya+ID+Front+Sarah\"\n      },\n      {\n        documentType: \"ID Back\",\n        imageUrl: \"https://via.placeholder.com/400x250?text=Kenya+ID+Back+Sarah\"\n      }\n    ],\n    livenessCheck: {\n      status: \"passed\",\n      confidence: 0.92,\n      frames: [\n        {\n          imageUrl: \"https://via.placeholder.com/300x300?text=Liveness+Frame+1+Sarah\",\n          timestamp: \"2023-10-02T14:21:00Z\"\n        },\n        {\n          imageUrl: \"https://via.placeholder.com/300x300?text=Liveness+Frame+2+Sarah\",\n          timestamp: \"2023-10-02T14:21:05Z\"\n        }\n      ]\n    }\n  },\n  {\n    id: \"523e4567-e89b-12d3-a456-426614174004\",\n    status: \"pending\",\n    userName: \"David Mutua\",\n    userEmail: \"david@example.com\",\n    userPhone: \"+254755789012\",\n    verificationType: \"idCard\",\n    remarks: \"\",\n    createdAt: \"2023-10-03T09:45:00Z\",\n    updatedAt: \"2023-10-03T09:45:00Z\",\n    nationalId: {\n      idNumber: \"45678901\",\n      serialNumber: \"E901234\",\n      fullName: \"DAVID MUTUA MUSYOKA\",\n      dateOfBirth: \"1995-03-18\",\n      gender: \"MALE\",\n      districtOfBirth: \"MACHAKOS\",\n      placeOfIssue: \"MACHAKOS\",\n      dateOfIssue: \"2019-02-05\",\n      extractedText: \"REPUBLIC OF KENYA\\nNATIONAL IDENTITY CARD\\nSerial No: E901234\\nID No: 45678901\\nFull Names: DAVID MUTUA MUSYOKA\\nSex: MALE\\nDate of Birth: 18.03.1995\\nDistrict of Birth: MACHAKOS\\nPlace of Issue: MACHAKOS\\nDate of Issue: 05.02.2019\\nSignature: [Signature]\",\n    },\n    documents: [\n      {\n        documentType: \"ID Front\",\n        imageUrl: \"https://via.placeholder.com/400x250?text=Kenya+ID+Front+David\"\n      },\n      {\n        documentType: \"ID Back\",\n        imageUrl: \"https://via.placeholder.com/400x250?text=Kenya+ID+Back+David\"\n      }\n    ],\n    livenessCheck: {\n      status: \"passed\",\n      confidence: 0.96,\n      frames: [\n        {\n          imageUrl: \"https://via.placeholder.com/300x300?text=Liveness+Frame+1+David\",\n          timestamp: \"2023-10-03T09:46:00Z\"\n        },\n        {\n          imageUrl: \"https://via.placeholder.com/300x300?text=Liveness+Frame+2+David\",\n          timestamp: \"2023-10-03T09:46:05Z\"\n        }\n      ]\n    }\n  }\n];\n\n// Add a request interceptor to add the auth token to requests\nAPI.interceptors.request.use(\n  (config) => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      config.headers['Authorization'] = `Bearer ${token}`;\n    }\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\n// Add a response interceptor to handle token expiration\nAPI.interceptors.response.use(\n  (response) => {\n    return response;\n  },\n  (error) => {\n    if (error.response && error.response.status === 401) {\n      // Token expired or invalid\n      localStorage.removeItem('token');\n      window.location.href = '/login';\n    }\n    return Promise.reject(error);\n  }\n);\n\n// Auth services\nexport const authService = {\n  login: async (email, password) => {\n    try {\n      // Mock login for development without backend\n      if (email === 'user' && password === 'password') {\n        const mockResponse = {\n          token: 'mock-jwt-token',\n          user: {\n            id: '1',\n            name: 'Test User',\n            email: 'user',\n            role: 'admin'\n          }\n        };\n        localStorage.setItem('token', mockResponse.token);\n        localStorage.setItem('user', JSON.stringify(mockResponse.user));\n        return mockResponse;\n      }\n      \n      // If credentials don't match the hardcoded ones, throw an error\n      throw {\n        response: {\n          data: {\n            message: 'Invalid credentials. Use username \"user\" and password \"password\".'\n          }\n        }\n      };\n      \n      // This code will run when you have a backend\n      // const response = await API.post('/auth/login', { email, password });\n      // if (response.data.token) {\n      //   localStorage.setItem('token', response.data.token);\n      // }\n      // return response.data;\n    } catch (error) {\n      throw error;\n    }\n  },\n  logout: () => {\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n  },\n  getCurrentUser: async () => {\n    try {\n      // Mock user data for development without backend\n      const user = localStorage.getItem('user');\n      if (user) {\n        return JSON.parse(user);\n      }\n      \n      // This code will run when you have a backend\n      // const response = await API.get('/auth/me');\n      // return response.data;\n      \n      throw new Error('Not authenticated');\n    } catch (error) {\n      throw error;\n    }\n  },\n};\n\n// KYC services\nexport const kycService = {\n  getAll: async (params = {}) => {\n    try {\n      // For mock implementation\n      // Process filters from params if provided\n      let filteredData = [...mockKYCData];\n      \n      if (params.status) {\n        filteredData = filteredData.filter(item => item.status === params.status);\n      }\n      \n      if (params.verificationType) {\n        filteredData = filteredData.filter(item => item.verificationType === params.verificationType);\n      }\n      \n      if (params.searchTerm) {\n        const term = params.searchTerm.toLowerCase();\n        filteredData = filteredData.filter(item => \n          item.id.toLowerCase().includes(term) || \n          item.userName.toLowerCase().includes(term) || \n          item.userEmail.toLowerCase().includes(term) ||\n          (item.nationalId?.idNumber || '').toLowerCase().includes(term)\n        );\n      }\n      \n      if (params.dateFrom) {\n        const fromDate = new Date(params.dateFrom);\n        filteredData = filteredData.filter(item => new Date(item.createdAt) >= fromDate);\n      }\n      \n      if (params.dateTo) {\n        const toDate = new Date(params.dateTo);\n        toDate.setHours(23, 59, 59, 999); // Set to end of day\n        filteredData = filteredData.filter(item => new Date(item.createdAt) <= toDate);\n      }\n      \n      // Sort data\n      if (params.sort) {\n        const [field, direction] = params.sort.split(':');\n        filteredData.sort((a, b) => {\n          if (direction === 'desc') {\n            return new Date(b[field]) - new Date(a[field]);\n          }\n          return new Date(a[field]) - new Date(b[field]);\n        });\n      }\n      \n      // Paginate data\n      const page = parseInt(params.page) || 1;\n      const limit = parseInt(params.limit) || 10;\n      const startIndex = (page - 1) * limit;\n      const endIndex = startIndex + limit;\n      const paginatedData = filteredData.slice(startIndex, endIndex);\n      \n      // Return mock response structure\n      return {\n        results: paginatedData,\n        totalPages: Math.ceil(filteredData.length / limit),\n        totalResults: filteredData.length,\n        page: page,\n        limit: limit\n      };\n      \n      // For actual implementation\n      // const response = await API.get('/kyc', { params });\n      // return response.data;\n    } catch (error) {\n      throw error;\n    }\n  },\n  getById: async (id) => {\n    try {\n      // For mock implementation\n      const result = mockKYCData.find(item => item.id === id);\n      if (!result) throw new Error('KYC record not found');\n      return result;\n      \n      // For actual implementation\n      // const response = await API.get(`/kyc/${id}`);\n      // return response.data;\n    } catch (error) {\n      throw error;\n    }\n  },\n  updateStatus: async (id, status, remarks) => {\n    try {\n      // For mock implementation\n      const itemIndex = mockKYCData.findIndex(item => item.id === id);\n      if (itemIndex === -1) throw new Error('KYC record not found');\n      \n      mockKYCData[itemIndex] = {\n        ...mockKYCData[itemIndex],\n        status,\n        remarks,\n        updatedAt: new Date().toISOString()\n      };\n      \n      return mockKYCData[itemIndex];\n      \n      // For actual implementation\n      // const response = await API.patch(`/kyc/${id}/status`, { status, remarks });\n      // return response.data;\n    } catch (error) {\n      throw error;\n    }\n  },\n};\n\n// Analytics services\nexport const analyticsService = {\n  getDashboardStats: async () => {\n    try {\n      // For mock implementation\n      // Calculate stats based on mockKYCData\n      const pendingRequests = mockKYCData.filter(item => item.status === 'pending').length;\n      const approvedRequests = mockKYCData.filter(item => item.status === 'approved').length;\n      const rejectedRequests = mockKYCData.filter(item => item.status === 'rejected').length;\n      \n      // Count verification types\n      const verificationTypes = {\n        idCard: mockKYCData.filter(item => item.verificationType === 'idCard').length,\n        passport: 0,\n        drivingLicense: 0,\n        other: 0\n      };\n      \n      // Generate mock trends data for the last 7 days\n      const verificationTrends = [];\n      const dailyTrends = []; // Add this for the Analytics component\n      const today = new Date();\n      for (let i = 6; i >= 0; i--) {\n        const date = new Date(today);\n        date.setDate(date.getDate() - i);\n        const formattedDate = date.toISOString().split('T')[0];\n        \n        // Generate random count between 1-10 for each day\n        const count = Math.floor(Math.random() * 10) + 1;\n        verificationTrends.push({ date: formattedDate, count });\n        \n        // For dailyTrends\n        const total = Math.floor(Math.random() * 30) + 10;\n        const approved = Math.floor(Math.random() * total * 0.7);\n        const rejected = Math.floor(Math.random() * (total - approved) * 0.5);\n        const pending = total - approved - rejected;\n        \n        dailyTrends.push({ \n          date: formattedDate, \n          total,\n          approved,\n          rejected,\n          pending\n        });\n      }\n      \n      // Calculate age distribution from mockKYCData\n      const ageDistribution = {\n        \"18-25\": 0,\n        \"26-35\": 0,\n        \"36-45\": 0,\n        \"46+\": 0\n      };\n      \n      mockKYCData.forEach(item => {\n        if (item.nationalId && item.nationalId.dateOfBirth) {\n          const birthDate = new Date(item.nationalId.dateOfBirth);\n          const age = today.getFullYear() - birthDate.getFullYear();\n          \n          if (age >= 18 && age <= 25) ageDistribution[\"18-25\"]++;\n          else if (age >= 26 && age <= 35) ageDistribution[\"26-35\"]++;\n          else if (age >= 36 && age <= 45) ageDistribution[\"36-45\"]++;\n          else if (age >= 46) ageDistribution[\"46+\"]++;\n        }\n      });\n      \n      // Calculate gender distribution\n      const genderDistribution = {\n        male: mockKYCData.filter(item => item.nationalId?.gender === 'MALE').length,\n        female: mockKYCData.filter(item => item.nationalId?.gender === 'FEMALE').length,\n        other: 0\n      };\n      \n      // Calculate district distribution\n      const districtData = {};\n      mockKYCData.forEach(item => {\n        const district = item.nationalId?.districtOfBirth;\n        if (district) {\n          if (districtData[district]) {\n            districtData[district]++;\n          } else {\n            districtData[district] = 1;\n          }\n        }\n      });\n      \n      // Calculate average verification time (mocked)\n      const avgVerificationTime = \"2.5\"; // in minutes\n      \n      // Calculate failure reasons (mocked)\n      const failureReasons = {\n        \"ID mismatch\": 30,\n        \"Poor image quality\": 25,\n        \"Fake ID detected\": 15, \n        \"Liveness check failed\": 20,\n        \"Other\": 10\n      };\n      \n      // Generate monthly conversion rate for Analytics component\n      const monthlyConversionRate = Array.from(Array(6).keys()).map(i => {\n        const date = new Date();\n        date.setMonth(date.getMonth() - i);\n        return {\n          month: date.toLocaleDateString('en-US', { month: 'short', year: 'numeric' }),\n          rate: Math.floor(Math.random() * 30) + 40 // 40-70% conversion rate\n        };\n      }).reverse();\n      \n      // Add insights for Analytics component\n      const insights = [\n        'Verification success rate has increased by 12% in the last 30 days',\n        'Mobile devices account for 65% of all verification attempts',\n        'Peak verification times are between 11:00 AM and 1:00 PM',\n        'Average time to complete verification has decreased from 4.2 to 3.1 minutes'\n      ];\n      \n      return {\n        totalRequests: mockKYCData.length,\n        pendingRequests,\n        approvedRequests,\n        rejectedRequests,\n        verificationTypes,\n        verificationTrends,\n        dailyTrends, // Add this for the Analytics component\n        monthlyConversionRate, // Add this for the Analytics component\n        ageDistribution,\n        genderDistribution,\n        districtData,\n        avgVerificationTime,\n        failureReasons,\n        insights // Add this for the Analytics component\n      };\n      \n      // For actual implementation\n      // const response = await API.get('/analytics/dashboard');\n      // return response.data;\n    } catch (error) {\n      throw error;\n    }\n  },\n  getVerificationStats: async (params = {}) => {\n    try {\n      // For mock implementation - adding more comprehensive analytics data\n      const dashboardStats = await analyticsService.getDashboardStats();\n      \n      // Generate funnel data\n      const funnelStepCounts = [250, 200, 180, 150, 120]; // Started, ID Uploaded, ID Verified, Liveness Check, Completed\n      const verificationFunnel = [\n        { step: 'Started', count: funnelStepCounts[0] },\n        { step: 'ID Uploaded', count: funnelStepCounts[1] },\n        { step: 'ID Verified', count: funnelStepCounts[2] },\n        { step: 'Liveness Check', count: funnelStepCounts[3] },\n        { step: 'Completed', count: funnelStepCounts[4] }\n      ];\n      \n      // Time per step\n      const stepTimes = [\n        { step: 'ID Upload', avgTimeSeconds: 45 },\n        { step: 'ID Verification', avgTimeSeconds: 120 },\n        { step: 'Liveness Check', avgTimeSeconds: 60 },\n        { step: 'Final Verification', avgTimeSeconds: 90 }\n      ];\n      \n      // Generate hourly distribution data\n      const hourlyDistribution = Array.from(Array(24).keys()).map(hour => ({\n        hour: `${hour}:00`,\n        count: Math.floor(Math.random() * 50) + (hour >= 8 && hour <= 17 ? 50 : 10) // Higher during business hours\n      }));\n      \n      // Abandonment info\n      const abandonmentReasons = [\n        { reason: 'Session timeout', percentage: 35 },\n        { reason: 'ID scan failed', percentage: 25 },\n        { reason: 'Liveness check issues', percentage: 20 },\n        { reason: 'User canceled', percentage: 15 },\n        { reason: 'Other', percentage: 5 }\n      ];\n      \n      // Rural vs urban count\n      const urbanCount = 180;\n      const ruralCount = 120;\n      \n      // Geographic insights\n      const geographicInsights = [\n        'Highest verification rates come from Nairobi County with 45% of all verifications',\n        'Rural areas show 25% lower completion rates compared to urban centers',\n        'Verification attempts in Mombasa peak during evening hours, unlike other regions'\n      ];\n      \n      // ID document age\n      const idDocumentAge = [45, 120, 80, 55]; // 0-1, 1-3, 3-5, 5+ years\n      \n      // Processing time trend\n      const processingTimeTrend = Array.from(Array(10).keys()).map(i => {\n        const date = new Date();\n        date.setDate(date.getDate() - i);\n        return {\n          date: date.toISOString().split('T')[0],\n          avgMinutes: Math.random() * 2 + 1 // Random between 1-3 minutes\n        };\n      }).reverse();\n      \n      // Agent performance data\n      const agentPerformance = [\n        { name: 'Agent 1', avgTime: 1.8, accuracy: 95 },\n        { name: 'Agent 2', avgTime: 2.5, accuracy: 92 },\n        { name: 'Agent 3', avgTime: 1.5, accuracy: 88 },\n        { name: 'Agent 4', avgTime: 2.1, accuracy: 97 }\n      ];\n      \n      // System performance data\n      const systemPerformance = Array.from(Array(24).keys()).map(hour => ({\n        hour: `${hour}:00`,\n        responseTime: Math.floor(Math.random() * 100) + 200, // 200-300ms\n        requestsPerMinute: Math.floor(Math.random() * 20) + (hour >= 8 && hour <= 17 ? 20 : 5) // Higher during business hours\n      }));\n      \n      // Operational recommendations\n      const operationalRecommendations = [\n        'Increase server capacity during peak hours (10AM-2PM) to reduce response times',\n        'Optimize the ID verification step which is currently the longest part of the process',\n        'Consider implementing a queue system during high traffic periods to maintain performance'\n      ];\n      \n      // Fraud detection data\n      const fraudDetectionData = {\n        potentialFraudCount: 35,\n        falsePositiveRate: '18%',\n        livenessCheckFailures: 28,\n        documentTamperingCount: 15,\n        multipleAttemptCount: 22,\n        suspiciousPatterns: [\n          { type: 'Multiple attempts with different IDs', count: 12 },\n          { type: 'Document tampering detected', count: 15 },\n          { type: 'Liveness check spoofing', count: 8 },\n          { type: 'Suspicious IP patterns', count: 6 }\n        ],\n        geographicRisk: [\n          { location: 'Region A', riskScore: 72 },\n          { location: 'Region B', riskScore: 45 },\n          { location: 'Region C', riskScore: 63 },\n          { location: 'Region D', riskScore: 28 }\n        ],\n        fraudAlerts: [\n          { \n            title: 'Multiple verification attempts detected',\n            severity: 'High',\n            description: 'Same device used for 5 different verification attempts with different IDs in the last 24 hours',\n            timestamp: '2023-10-03 14:25:12'\n          },\n          { \n            title: 'Potential document tampering',\n            severity: 'Medium',\n            description: 'Image analysis detected potential modifications to ID number field',\n            timestamp: '2023-10-03 11:18:45'\n          },\n          { \n            title: 'Unusual geographic pattern',\n            severity: 'Low',\n            description: 'User location changed significantly during verification process',\n            timestamp: '2023-10-02 19:36:22'\n          }\n        ]\n      };\n      \n      // Return comprehensive analytics data\n      return {\n        totalRequests: dashboardStats.totalRequests,\n        approvedRequests: dashboardStats.approvedRequests,\n        rejectedRequests: dashboardStats.rejectedRequests,\n        pendingRequests: dashboardStats.pendingRequests,\n        avgVerificationTime: dashboardStats.avgVerificationTime,\n        avgProcessingTime: '2.3', // in hours\n        \n        // Verification trends\n        verificationTrends: dashboardStats.verificationTrends,\n        hourlyDistribution,\n        \n        // Conversion and funnel data\n        verificationFunnel,\n        stepTimes,\n        biggestDropoffStep: 'Liveness Check → Completion',\n        avgCompletionTime: '3m 15s',\n        abandonmentRate: '52%',\n        commonAbandonmentPoint: 'Liveness Check',\n        abandonmentReasons,\n        monthlyConversionRate: Array.from(Array(6).keys()).map(i => {\n          const date = new Date();\n          date.setMonth(date.getMonth() - i);\n          return {\n            month: date.toLocaleDateString('en-US', { month: 'short', year: 'numeric' }),\n            rate: Math.floor(Math.random() * 30) + 40 // 40-70% conversion rate\n          };\n        }).reverse(),\n        \n        // Document data\n        verificationTypes: dashboardStats.verificationTypes,\n        \n        // Demographics\n        ageDistribution: dashboardStats.ageDistribution,\n        genderDistribution: dashboardStats.genderDistribution,\n        deviceDistribution: {\n          mobile: 280,\n          desktop: 120,\n          tablet: 40\n        },\n        mostCommonAgeGroup: '26-35',\n        genderRatio: 'M:F 1.2:1',\n        idDocumentAge,\n        \n        // Geographic data\n        districtData: dashboardStats.districtData,\n        urbanCount,\n        ruralCount,\n        geographicInsights,\n        \n        // Operational data\n        processingTimeTrend,\n        agentPerformance,\n        systemPerformance,\n        systemUptime: '99.8%',\n        peakHour: '11:00 - 13:00',\n        avgQueueTime: '48s',\n        operationalRecommendations,\n        \n        // Fraud detection\n        failureReasons: dashboardStats.failureReasons,\n        ...fraudDetectionData,\n        \n        // Insights\n        insights: [\n          'Verification success rate has increased by 12% in the last 30 days',\n          'Mobile devices account for 65% of all verification attempts',\n          'Peak verification times are between 11:00 AM and 1:00 PM',\n          'Average time to complete verification has decreased from 4.2 to 3.1 minutes'\n        ]\n      };\n      \n      // For actual implementation\n      // const response = await API.get('/analytics/verifications', { params });\n      // return response.data;\n    } catch (error) {\n      throw error;\n    }\n  },\n};\n\nexport default {\n  authService,\n  kycService,\n  analyticsService,\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}