{"ast":null,"code":"import axios from 'axios';\n\n// Create an axios instance with default config\nconst API = axios.create({\n  baseURL: process.env.REACT_APP_API_URL || 'http://localhost:5000/api',\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Add a request interceptor to add the auth token to requests\nAPI.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers['Authorization'] = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Add a response interceptor to handle token expiration\nAPI.interceptors.response.use(response => {\n  return response;\n}, error => {\n  if (error.response && error.response.status === 401) {\n    // Token expired or invalid\n    localStorage.removeItem('token');\n    window.location.href = '/login';\n  }\n  return Promise.reject(error);\n});\n\n// Auth services\nexport const authService = {\n  login: async (email, password) => {\n    try {\n      // Mock login for development without backend\n      if (email === 'user' && password === 'password') {\n        const mockResponse = {\n          token: 'mock-jwt-token',\n          user: {\n            id: '1',\n            name: 'Test User',\n            email: 'user',\n            role: 'admin'\n          }\n        };\n        localStorage.setItem('token', mockResponse.token);\n        localStorage.setItem('user', JSON.stringify(mockResponse.user));\n        return mockResponse;\n      }\n\n      // If credentials don't match the hardcoded ones, throw an error\n      throw {\n        response: {\n          data: {\n            message: 'Invalid credentials. Use username \"user\" and password \"password\".'\n          }\n        }\n      };\n\n      // This code will run when you have a backend\n      // const response = await API.post('/auth/login', { email, password });\n      // if (response.data.token) {\n      //   localStorage.setItem('token', response.data.token);\n      // }\n      // return response.data;\n    } catch (error) {\n      throw error;\n    }\n  },\n  logout: () => {\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n  },\n  getCurrentUser: async () => {\n    try {\n      // Mock user data for development without backend\n      const user = localStorage.getItem('user');\n      if (user) {\n        return JSON.parse(user);\n      }\n\n      // This code will run when you have a backend\n      // const response = await API.get('/auth/me');\n      // return response.data;\n\n      throw new Error('Not authenticated');\n    } catch (error) {\n      throw error;\n    }\n  }\n};\n\n// KYC services\nexport const kycService = {\n  getAll: async (params = {}) => {\n    try {\n      const response = await API.get('/kyc', {\n        params\n      });\n      return response.data;\n    } catch (error) {\n      throw error;\n    }\n  },\n  getById: async id => {\n    try {\n      const response = await API.get(`/kyc/${id}`);\n      return response.data;\n    } catch (error) {\n      throw error;\n    }\n  },\n  updateStatus: async (id, status, remarks) => {\n    try {\n      const response = await API.patch(`/kyc/${id}/status`, {\n        status,\n        remarks\n      });\n      return response.data;\n    } catch (error) {\n      throw error;\n    }\n  }\n};\n\n// Analytics services\nexport const analyticsService = {\n  getDashboardStats: async () => {\n    try {\n      const response = await API.get('/analytics/dashboard');\n      return response.data;\n    } catch (error) {\n      throw error;\n    }\n  },\n  getVerificationStats: async (params = {}) => {\n    try {\n      const response = await API.get('/analytics/verifications', {\n        params\n      });\n      return response.data;\n    } catch (error) {\n      throw error;\n    }\n  }\n};\nexport default {\n  authService,\n  kycService,\n  analyticsService\n};","map":{"version":3,"names":["axios","API","create","baseURL","process","env","REACT_APP_API_URL","headers","interceptors","request","use","config","token","localStorage","getItem","error","Promise","reject","response","status","removeItem","window","location","href","authService","login","email","password","mockResponse","user","id","name","role","setItem","JSON","stringify","data","message","logout","getCurrentUser","parse","Error","kycService","getAll","params","get","getById","updateStatus","remarks","patch","analyticsService","getDashboardStats","getVerificationStats"],"sources":["/Users/akasozi/Documents/web-apps/ekyc-dashboard/ekyc-dashboard/src/services/api.js"],"sourcesContent":["import axios from 'axios';\n\n// Create an axios instance with default config\nconst API = axios.create({\n  baseURL: process.env.REACT_APP_API_URL || 'http://localhost:5000/api',\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Add a request interceptor to add the auth token to requests\nAPI.interceptors.request.use(\n  (config) => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      config.headers['Authorization'] = `Bearer ${token}`;\n    }\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\n// Add a response interceptor to handle token expiration\nAPI.interceptors.response.use(\n  (response) => {\n    return response;\n  },\n  (error) => {\n    if (error.response && error.response.status === 401) {\n      // Token expired or invalid\n      localStorage.removeItem('token');\n      window.location.href = '/login';\n    }\n    return Promise.reject(error);\n  }\n);\n\n// Auth services\nexport const authService = {\n  login: async (email, password) => {\n    try {\n      // Mock login for development without backend\n      if (email === 'user' && password === 'password') {\n        const mockResponse = {\n          token: 'mock-jwt-token',\n          user: {\n            id: '1',\n            name: 'Test User',\n            email: 'user',\n            role: 'admin'\n          }\n        };\n        localStorage.setItem('token', mockResponse.token);\n        localStorage.setItem('user', JSON.stringify(mockResponse.user));\n        return mockResponse;\n      }\n      \n      // If credentials don't match the hardcoded ones, throw an error\n      throw {\n        response: {\n          data: {\n            message: 'Invalid credentials. Use username \"user\" and password \"password\".'\n          }\n        }\n      };\n      \n      // This code will run when you have a backend\n      // const response = await API.post('/auth/login', { email, password });\n      // if (response.data.token) {\n      //   localStorage.setItem('token', response.data.token);\n      // }\n      // return response.data;\n    } catch (error) {\n      throw error;\n    }\n  },\n  logout: () => {\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n  },\n  getCurrentUser: async () => {\n    try {\n      // Mock user data for development without backend\n      const user = localStorage.getItem('user');\n      if (user) {\n        return JSON.parse(user);\n      }\n      \n      // This code will run when you have a backend\n      // const response = await API.get('/auth/me');\n      // return response.data;\n      \n      throw new Error('Not authenticated');\n    } catch (error) {\n      throw error;\n    }\n  },\n};\n\n// KYC services\nexport const kycService = {\n  getAll: async (params = {}) => {\n    try {\n      const response = await API.get('/kyc', { params });\n      return response.data;\n    } catch (error) {\n      throw error;\n    }\n  },\n  getById: async (id) => {\n    try {\n      const response = await API.get(`/kyc/${id}`);\n      return response.data;\n    } catch (error) {\n      throw error;\n    }\n  },\n  updateStatus: async (id, status, remarks) => {\n    try {\n      const response = await API.patch(`/kyc/${id}/status`, { status, remarks });\n      return response.data;\n    } catch (error) {\n      throw error;\n    }\n  },\n};\n\n// Analytics services\nexport const analyticsService = {\n  getDashboardStats: async () => {\n    try {\n      const response = await API.get('/analytics/dashboard');\n      return response.data;\n    } catch (error) {\n      throw error;\n    }\n  },\n  getVerificationStats: async (params = {}) => {\n    try {\n      const response = await API.get('/analytics/verifications', { params });\n      return response.data;\n    } catch (error) {\n      throw error;\n    }\n  },\n};\n\nexport default {\n  authService,\n  kycService,\n  analyticsService,\n};"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,MAAMC,GAAG,GAAGD,KAAK,CAACE,MAAM,CAAC;EACvBC,OAAO,EAAEC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,2BAA2B;EACrEC,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEF;AACAN,GAAG,CAACO,YAAY,CAACC,OAAO,CAACC,GAAG,CACzBC,MAAM,IAAK;EACV,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,IAAIF,KAAK,EAAE;IACTD,MAAM,CAACJ,OAAO,CAAC,eAAe,CAAC,GAAG,UAAUK,KAAK,EAAE;EACrD;EACA,OAAOD,MAAM;AACf,CAAC,EACAI,KAAK,IAAK;EACT,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACAd,GAAG,CAACO,YAAY,CAACU,QAAQ,CAACR,GAAG,CAC1BQ,QAAQ,IAAK;EACZ,OAAOA,QAAQ;AACjB,CAAC,EACAH,KAAK,IAAK;EACT,IAAIA,KAAK,CAACG,QAAQ,IAAIH,KAAK,CAACG,QAAQ,CAACC,MAAM,KAAK,GAAG,EAAE;IACnD;IACAN,YAAY,CAACO,UAAU,CAAC,OAAO,CAAC;IAChCC,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,QAAQ;EACjC;EACA,OAAOP,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACA,OAAO,MAAMS,WAAW,GAAG;EACzBC,KAAK,EAAE,MAAAA,CAAOC,KAAK,EAAEC,QAAQ,KAAK;IAChC,IAAI;MACF;MACA,IAAID,KAAK,KAAK,MAAM,IAAIC,QAAQ,KAAK,UAAU,EAAE;QAC/C,MAAMC,YAAY,GAAG;UACnBhB,KAAK,EAAE,gBAAgB;UACvBiB,IAAI,EAAE;YACJC,EAAE,EAAE,GAAG;YACPC,IAAI,EAAE,WAAW;YACjBL,KAAK,EAAE,MAAM;YACbM,IAAI,EAAE;UACR;QACF,CAAC;QACDnB,YAAY,CAACoB,OAAO,CAAC,OAAO,EAAEL,YAAY,CAAChB,KAAK,CAAC;QACjDC,YAAY,CAACoB,OAAO,CAAC,MAAM,EAAEC,IAAI,CAACC,SAAS,CAACP,YAAY,CAACC,IAAI,CAAC,CAAC;QAC/D,OAAOD,YAAY;MACrB;;MAEA;MACA,MAAM;QACJV,QAAQ,EAAE;UACRkB,IAAI,EAAE;YACJC,OAAO,EAAE;UACX;QACF;MACF,CAAC;;MAED;MACA;MACA;MACA;MACA;MACA;IACF,CAAC,CAAC,OAAOtB,KAAK,EAAE;MACd,MAAMA,KAAK;IACb;EACF,CAAC;EACDuB,MAAM,EAAEA,CAAA,KAAM;IACZzB,YAAY,CAACO,UAAU,CAAC,OAAO,CAAC;IAChCP,YAAY,CAACO,UAAU,CAAC,MAAM,CAAC;EACjC,CAAC;EACDmB,cAAc,EAAE,MAAAA,CAAA,KAAY;IAC1B,IAAI;MACF;MACA,MAAMV,IAAI,GAAGhB,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC;MACzC,IAAIe,IAAI,EAAE;QACR,OAAOK,IAAI,CAACM,KAAK,CAACX,IAAI,CAAC;MACzB;;MAEA;MACA;MACA;;MAEA,MAAM,IAAIY,KAAK,CAAC,mBAAmB,CAAC;IACtC,CAAC,CAAC,OAAO1B,KAAK,EAAE;MACd,MAAMA,KAAK;IACb;EACF;AACF,CAAC;;AAED;AACA,OAAO,MAAM2B,UAAU,GAAG;EACxBC,MAAM,EAAE,MAAAA,CAAOC,MAAM,GAAG,CAAC,CAAC,KAAK;IAC7B,IAAI;MACF,MAAM1B,QAAQ,GAAG,MAAMjB,GAAG,CAAC4C,GAAG,CAAC,MAAM,EAAE;QAAED;MAAO,CAAC,CAAC;MAClD,OAAO1B,QAAQ,CAACkB,IAAI;IACtB,CAAC,CAAC,OAAOrB,KAAK,EAAE;MACd,MAAMA,KAAK;IACb;EACF,CAAC;EACD+B,OAAO,EAAE,MAAOhB,EAAE,IAAK;IACrB,IAAI;MACF,MAAMZ,QAAQ,GAAG,MAAMjB,GAAG,CAAC4C,GAAG,CAAC,QAAQf,EAAE,EAAE,CAAC;MAC5C,OAAOZ,QAAQ,CAACkB,IAAI;IACtB,CAAC,CAAC,OAAOrB,KAAK,EAAE;MACd,MAAMA,KAAK;IACb;EACF,CAAC;EACDgC,YAAY,EAAE,MAAAA,CAAOjB,EAAE,EAAEX,MAAM,EAAE6B,OAAO,KAAK;IAC3C,IAAI;MACF,MAAM9B,QAAQ,GAAG,MAAMjB,GAAG,CAACgD,KAAK,CAAC,QAAQnB,EAAE,SAAS,EAAE;QAAEX,MAAM;QAAE6B;MAAQ,CAAC,CAAC;MAC1E,OAAO9B,QAAQ,CAACkB,IAAI;IACtB,CAAC,CAAC,OAAOrB,KAAK,EAAE;MACd,MAAMA,KAAK;IACb;EACF;AACF,CAAC;;AAED;AACA,OAAO,MAAMmC,gBAAgB,GAAG;EAC9BC,iBAAiB,EAAE,MAAAA,CAAA,KAAY;IAC7B,IAAI;MACF,MAAMjC,QAAQ,GAAG,MAAMjB,GAAG,CAAC4C,GAAG,CAAC,sBAAsB,CAAC;MACtD,OAAO3B,QAAQ,CAACkB,IAAI;IACtB,CAAC,CAAC,OAAOrB,KAAK,EAAE;MACd,MAAMA,KAAK;IACb;EACF,CAAC;EACDqC,oBAAoB,EAAE,MAAAA,CAAOR,MAAM,GAAG,CAAC,CAAC,KAAK;IAC3C,IAAI;MACF,MAAM1B,QAAQ,GAAG,MAAMjB,GAAG,CAAC4C,GAAG,CAAC,0BAA0B,EAAE;QAAED;MAAO,CAAC,CAAC;MACtE,OAAO1B,QAAQ,CAACkB,IAAI;IACtB,CAAC,CAAC,OAAOrB,KAAK,EAAE;MACd,MAAMA,KAAK;IACb;EACF;AACF,CAAC;AAED,eAAe;EACbS,WAAW;EACXkB,UAAU;EACVQ;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}